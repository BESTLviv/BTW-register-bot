from telebot import TeleBot
import mongoengine as me



class Data:


    def __init__(self, conn_string: str, bot: TeleBot):
        self.bot = bot

        me.connect(host=conn_string)
        print("connection success ")
        self.add_quizes()

    def add_quizes(self):
        if len(Quiz.objects) == 0:
            self._add_start_quiz()
        else:
            self.update_quiz_table()


    def _add_start_quiz(self):

        quiz = Quiz(name="StartQuiz", is_required=True)

        q_name_surname = Question(
            name="name_surname",
            message="–¢–æ–¥—ñ –±—É–¥–µ–º–æ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è.\n–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
            correct_answer_message="–ß—É–¥–æ–≤–æ, –∫–æ–º–∞–Ω–¥–∞ BTW –≤—ñ—Ç–∞—î —Ç–µ–±–µ!üòç",
            wrong_answer_message="–í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )

        q_age = Question(
            name="age",
            message="–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
            regex="[1-9][0-9]",
            correct_answer_message="–û–≥–æ, –º–∏ –æ–¥–Ω–æ–ª—ñ—Ç–∫–∏üôà",
            wrong_answer_message="–í–∫–∞–∂–∏ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≤—ñ–∫ ü§°",
        )

        q_school = Question(
            name="school",
            message="–î–µ –≤—á–∏—à—Å—è? –í–∏–±–µ—Ä–∏ –∞–±–æ –≤–≤–µ–¥–∏.",
            buttons=[
                "–ù–£–õ–ü",
                "–õ–ù–£",
                "–£–ö–£",
                "–ö–ü–Ü",
                "–ö–ù–£",
                "–©–µ –≤ —à–∫–æ–ª—ñ",
                "–í–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤(-–ª–∞)",
            ],
            correct_answer_message="–ö–ª–∞—Åüî•",
            wrong_answer_message="–û–±–µ—Ä–∏ –∞–±–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç–æ–º  ü§°",
        )

        q_study_term = Question(
            name="study_term",
            message="–ù–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ?",
            buttons=[
                "–ü–µ—Ä—à–∏–π",
                "–î—Ä—É–≥–∏–π",
                "–¢—Ä–µ—Ç—ñ–π",
                "–ß–µ—Ç–≤–µ—Ä—Ç–∏–π",
                "–ù–∞ –º–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä—ñ",
                "–ù—ñ—á–æ–≥–æ –∑ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–æ–≥–æ",
            ],
            allow_user_input=False,
            correct_answer_message="–Ü–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —â–æ—Å—å –Ω–æ–≤–µü§©",
            wrong_answer_message="–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ü§°",
        )

        q_contact = Question(
            name="contact",
            message="–°—É–ø–µ—Ä! –ü–æ–¥—ñ–ª–∏—à—Å—è –∑ –Ω–∞–º–∏ —Å–≤–æ—ó–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏?",
            buttons=["–¢—Ä–∏–º–∞–π!"],
            input_type="contact",
            correct_answer_message="–î—è–∫—É—é. –ê —è –∑–∞–ª–∏—à–∞—é —Ç–æ–±—ñ –∫–æ–Ω—Ç–∞–∫—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞: @kerril ü•∞",
            wrong_answer_message="–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç ü§°",
        )

        q_email = Question(
            name="email",
            message="–ú–∏ –Ω–∞ —Ñ—ñ–Ω—ñ—à–Ω—ñ–π –ø—Ä—è–º—ñ–π. –í–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É —Å–≤–æ—î—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏. –û–±—ñ—Ü—è—î–º–æ, —Å–ø–∞–º–∏—Ç–∏ –Ω–µ –±—É–¥–µ–º–æüòâ",
            regex="^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$",
            correct_answer_message="–î—è–∫—É—é ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É ü§°",
        )

        q_agree = Question(
            name="user_agreements",
            message="–ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö.",
            buttons=["–Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å."],
            allow_user_input=False,
        )

        q_register_end = Question(
            name="end_register",
            message="–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞üéâ Ô∏è\n\n –î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–≤ BTW X‚ù§Ô∏è\n–ß–µ–∫–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥–∞—Ö —Ç–∞ —à–µ—Ä—ñ–Ω–≥–∞—Ö.\n\n –î–æ–ª—É—á–∞–π—Å—è –¥–æ –Ω–∞—à–æ–≥–æ —á–∞—Ç—É –∑ —Å–ø—ñ–∫–µ—Ä–∞–º–∏: https://t.me/joinchat/fa4V6BaBQB45Zjhi \n<b>–ü–æ–æ–Ω–ª–∞–π–Ω–∏–º–æ?</b> ü§ì",
            buttons=[
                "–ó–≤—ñ—Å–Ω–æ"
            ],
            allow_user_input=False,
        )

        quiz.questions = [
            q_name_surname,
            q_age,
            q_school,
            q_study_term,
            q_contact,
            q_email,
            q_agree,
            q_register_end,
        ]

        quiz.save()


    def update_quiz_table(self):
        quizes = Quiz.objects

        # form paragraphs in questions
        for quiz in quizes:
            for question in quiz.questions:
                question.message = question.message.replace("\\n", "\n")

            quiz.save()


class User(me.Document):
    chat_id = me.IntField(required=True, unique=True)
    name = me.StringField(required=True)
    surname = me.StringField(required=True)
    username = me.StringField(required=True)
    additional_info = me.DictField(default=None)
    registration_date = me.DateTimeField(required=True)
    register_source = me.StringField(default="Unknown")
    last_update_date = me.DateTimeField(required=True)
    last_interaction_date = me.DateTimeField(required=True)
    is_blocked = me.BooleanField(default=False)


class Question(me.EmbeddedDocument):
    name = me.StringField(required=True)
    message = me.StringField(required=True)
    buttons = me.ListField(default=list())
    input_type = me.StringField(choices=["text", "photo", "contact"], default="text")
    max_text_size = me.IntField(max_value=4000)
    allow_user_input = me.BooleanField(default=True)
    regex = me.StringField(default=None)
    correct_answer_message = me.StringField(defaul=None)
    wrong_answer_message = me.StringField(default="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!")


class Quiz(me.Document):
    name = me.StringField(required=True)
    questions = me.ListField(me.EmbeddedDocumentField(Question), default=list())
    is_required = me.BooleanField(default=False)
